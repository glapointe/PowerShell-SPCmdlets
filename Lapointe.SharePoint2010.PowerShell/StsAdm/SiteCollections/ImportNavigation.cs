using System.Text;
using System.Xml;
using Lapointe.SharePoint.PowerShell.StsAdm.SPValidators;
using Lapointe.SharePoint.PowerShell.StsAdm.OperationHelpers;
using Microsoft.SharePoint;
using Microsoft.SharePoint.StsAdmin;

namespace Lapointe.SharePoint.PowerShell.StsAdm.SiteCollections
{
    public class ImportNavigation : SPOperation
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportNavigation"/> class.
        /// </summary>
        public ImportNavigation()
        {
            SPParamCollection parameters = new SPParamCollection();
            StringBuilder sb = new StringBuilder();
#if MOSS
            parameters.Add(new SPParam("url", "url", true, null, new SPUrlValidator(), "Please specify the site collection."));
            parameters.Add(new SPParam("inputfile", "input", true, null, new SPFileExistsValidator(), "Please specify the input file name."));
            parameters.Add(new SPParam("deleteexistingglobal", "deleteglobal", false, "true", new SPTrueFalseValidator(), "Please specify either \"true\" or \"false\"."));
            parameters.Add(new SPParam("deleteexistingcurrent", "deletecurrent", false, "true", new SPTrueFalseValidator(), "Please specify either \"true\" or \"false\"."));
            parameters.Add(new SPParam("backuptarget", "backup", false, null, new SPDirectoryExistsAndValidFileNameValidator(), "Make sure the backup file directory exists and a valid filename is provided."));
            parameters.Add(new SPParam("scope", "s", false, "site", new SPRegexValidator("(?i:^Site$|^Web$)")));
            parameters.Add(new SPParam("includechildren", "ic"));

            sb.Append("\r\n\r\nRebuilds the Global and/or Current navigation based on a passed in XML file which can be generated by the gl-enumnavigation command and then modified (note that the Id attribute is ignored).\r\n\r\nParameters:");
            sb.Append("\r\n\t-url <site collection url>");
            sb.Append("\r\n\t-inputfile <xml file to use as input>");
            sb.Append("\r\n\t[-scope <Site | Web> (defaults to Site)]");
            sb.Append("\r\n\t[-deleteexistingglobal <true (default) | false>]");
            sb.Append("\r\n\t[-deleteexistingcurrent <true (default) | false>]");
            sb.Append("\r\n\t[-includechildren (applicable when the scope is Web only)]");
            sb.Append("\r\n\t[-backuptarget <filename>]");
#else
            sb.Append(NOT_VALID_FOR_FOUNDATION);
#endif

            Init(parameters, sb.ToString());
        }

        #region ISPStsadmCommand Members

        /// <summary>
        /// Gets the help message.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <returns></returns>
        public override string GetHelpMessage(string command)
        {
            return HelpMessage;
        }

        /// <summary>
        /// Runs the specified command.
        /// </summary>
        /// <param name="command">The command.</param>
        /// <param name="keyValues">The key values.</param>
        /// <param name="output">The output.</param>
        /// <returns></returns>
        public override int Execute(string command, System.Collections.Specialized.StringDictionary keyValues, out string output)
        {
            output = string.Empty;
#if !MOSS
            output = NOT_VALID_FOR_FOUNDATION;
            return (int)ErrorCodes.GeneralError;
#endif

            string url = Params["url"].Value.TrimEnd('/');
            string filename = Params["inputfile"].Value;
            string scope = Params["scope"].Value.ToLowerInvariant();
            bool includeChildren = Params["includechildren"].UserTypedIn;

            bool deleteExistingGlobal = bool.Parse(Params["deleteexistingglobal"].Value);
            bool deleteExistingCurrent = bool.Parse(Params["deleteexistingcurrent"].Value);
            

            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(filename);


            using (SPSite site = new SPSite(url))
            {
                if (Params["backuptarget"].UserTypedIn)
                {
                    XmlDocument xmlBackupDoc = Common.SiteCollections.ExportNavigation.GetNavigation(site);
                    xmlBackupDoc.Save(Params["backuptarget"].Value);
                }
                if (scope == "site")
                    Common.SiteCollections.ImportNavigation.SetNavigation(site, xmlDoc, deleteExistingGlobal, deleteExistingCurrent);
                else
                {
                    using (SPWeb web = site.AllWebs[Utilities.GetServerRelUrlFromFullUrl(url)])
                    {

                        Common.SiteCollections.ImportNavigation.SetNavigation(web, xmlDoc, deleteExistingGlobal, deleteExistingCurrent, includeChildren);
                    }
                }
            }
            return (int)ErrorCodes.NoError;
        }
        #endregion

    }
}
